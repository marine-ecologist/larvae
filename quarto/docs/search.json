[
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "",
    "section": "",
    "text": "Year\nSource\n\n\n\n\n2020\n2.2.OTI_Pools_Culture_2020\n\n\n2020\n2.1.Witstari_Jetty_Pools_Culture_2020.csv\n\n\n2021\nRearingLarvaeData_2021.xlsx\n\n\n2022\nLarval Density Database Lizard Is 2022.xlsx\n\n\n2023\nDATA_MC_Collection_Cultures.xlsx\n\n\n2024\nDATA_MC_SpawningOps_DataSheets_Nov-Dec2024.xlsx\n\n\n\nAccessible via AIMS share drive:\n\n\n\nlibrary(tidyverse)\nlibrary(janitor)\n\nculture_pools_2020 &lt;-\n  rbind(\n    # read_csv(\"data/2020/2.1.Witstari_Jetty_Pools_Culture_2020.csv\", show_col_types = FALSE) |&gt;\n    # clean_names() |&gt;\n    # mutate(volume = pool_bin_volume/1000, # note this must be ml not l\n    #        density = larvae_ml*1000,\n    #        id=pool,\n    #        date = as.POSIXct(date, format = \"%d/%m/%y\")) |&gt;\n    # mutate(spawndate = as.POSIXct(\"5/12/20\", format = \"%d/%m/%y\")) |&gt; # assume 5th Dec?\n    # mutate(days = as.numeric(as.POSIXct(date) - spawndate)) |&gt;\n    # select(date, days, id, replicate, density, volume) |&gt;\n    # mutate(id=as.factor(id),\n    #        replicate=as.factor(replicate)\n    #        ) |&gt;\n    # mutate(year = 2020, density=as.numeric(density)),\n\n    read_csv(\"data/2020/2.2.OTI_Pools_Culture_2020.csv\", show_col_types = FALSE) |&gt;\n      clean_names() |&gt;\n      drop_na() |&gt;\n      mutate(\n        date =  as.POSIXct(date, format = \"%d/%m/%y\"),\n        volume = pool_bin_volume_ml/1000,\n        density = larvae_ml * 1000,\n        id = pool,\n        spawndate = case_when(\n          pool == 2 ~ as.POSIXct(\"05/12/20\", format = \"%d/%m/%y\"),\n          pool == 4 ~ as.POSIXct(\"04/12/20\", format = \"%d/%m/%y\"),\n          TRUE ~ NA_POSIXct_\n        )\n      ) |&gt;\n      mutate(days = as.numeric(date - spawndate)/(60*60*24)) |&gt;\n      select(date, days, id, replicate, density, volume) |&gt;\n      mutate(id=as.factor(id),\n             replicate=as.factor(replicate)\n      ) |&gt;\n      mutate(year = 2020, density=as.numeric(density))\n  ) |&gt;\n  mutate(total = density * volume) |&gt;\n  filter(density &gt; 1000) |&gt;\n  filter(volume &lt; 100)\n\n\n\n\nculture_pools_2021 &lt;- read_excel(\"data/2021/RearingLarvaeData_2021.xlsx\", sheet=\"LarvaeDensity_Rearing\") |&gt;\n  clean_names() |&gt;\n  mutate(days =  as.numeric(sampling_date-spawning_date),\n         date=as.POSIXct(sampling_date, format = \"%d/%m/%Y\")) |&gt;\n  rename(id = pool_id) |&gt;\n  rename(density = larvae_number_per_l) |&gt;\n  rename(volume = pool_volume_liter) |&gt;\n  select(date, days, id, replicate, density, volume) |&gt;\n  mutate(across(where(is.character), ~na_if(., \"NA\"))) |&gt;\n  na.omit() |&gt;\n  mutate(id=as.factor(id),\n         replicate=as.factor(replicate)\n  ) |&gt;\n  mutate(year = 2021, density=as.numeric(density)) |&gt;\n  mutate(total = density * volume)\n\n\nculture_pools_2022 &lt;- read_excel(\"data/2022/Larval Density Database Lizard Is 2022.xlsx\", sheet = \"Culturing\") |&gt;\n  janitor::clean_names() |&gt;\n  rename(\n    volume = pool_volume,\n    replicate = sample_replicate,\n    days=time,\n    id=pool_no\n  ) |&gt;\n  mutate(\n    density = suppressWarnings(as.numeric(larvae_per_ml)) *1000\n  ) |&gt;\n  select(date, days, id, replicate, density, volume) |&gt;\n  na.omit() |&gt;\n  mutate(id=as.factor(id),\n         replicate=as.factor(replicate),\n         date=as.POSIXct(date,format = \"%d/%m/%Y\")\n  ) |&gt;\n  mutate(year = 2022, density=as.numeric(density)) |&gt;\n  mutate(total = density * volume)\n\n\nculture_pools_2023 &lt;- read_excel(\"data/2023/DATA_MC_Collection_Cultures.xlsx\", sheet=\"data_CultureClean\") |&gt;\n  clean_names() |&gt;\n  mutate(date = date_sample,\n         days =  as.numeric(date_sample-date_collection)/(60*60*24)) |&gt;\n  rename(volume = culture_volume_l) |&gt;\n  rename(sample_volume = sample_volume_m_l) |&gt;\n  rename(id = pool_tank_number) |&gt;\n  rename(replicate =  sample_number) |&gt;\n  rename(density = sample_volume) |&gt;\n  mutate(across(where(is.character), ~na_if(., \"NA\"))) |&gt;\n  mutate(density = as.numeric(density)) |&gt;\n  select(date, days, id, replicate, density, volume) |&gt;\n  mutate(id=as.factor(id),\n         replicate=as.factor(replicate)\n  ) |&gt;\n  mutate(year = 2023, density=as.numeric(density), volume=as.numeric(volume)) |&gt;\n  mutate(total = density * volume)\n\n\n\nculture_pools_2024 &lt;- read_excel(\"data/2024/DATA_MC_SpawningOps_DataSheets_Nov-Dec2024.xlsx\", sheet=\"data_LarvCulture1-6_CLEAN\") |&gt;\n  clean_names() |&gt;\n  filter(volume_culture_l == 9280.0) |&gt;\n  mutate(\n    sampling_date = suppressWarnings(\n      if_else(\n        grepl(\"^\\\\d{1,2}/\\\\d{1,2}/\\\\d{4}$\", sampling_date),\n        as.Date(sampling_date, format = \"%d/%m/%Y\"),\n        as.Date(as.numeric(sampling_date), origin = \"1899-12-30\")\n      )\n    )\n  ) |&gt;\n  mutate(\n    sampling_date = as.Date(sampling_date, format = \"%d/%m/%Y\"),\n    days = as.numeric(sampling_date - as.Date(spawning_date)),\n    replicate = pool_id,\n    id = sample_id,\n  ) |&gt;\n  mutate(density = larvae_count_perml * 1000) |&gt;\n  mutate(volume = volume_culture_l,\n         date = sampling_date) |&gt;\n  select(date, days, id, replicate, density, volume) |&gt;\n  mutate(id=as.factor(id),\n         replicate=as.factor(replicate)\n  ) |&gt;\n  mutate(year = 2024, density=as.numeric(density), days = as.factor(days), total=volume*density)\n\nremove_outliers_se &lt;- function(df, se_mult = 2) {\n  se &lt;- sd(df$density, na.rm = TRUE) / sqrt(sum(!is.na(df$density)))\n  m &lt;- mean(df$density, na.rm = TRUE)\n  dplyr::filter(df, abs(density - m) &lt;= se_mult * se)\n}\n\n\nculture_pools &lt;- rbind(culture_pools_2020,\n                       culture_pools_2021,\n                       culture_pools_2022,\n                       culture_pools_2023,\n                       culture_pools_2024) |&gt;\n  mutate(days=as.factor(days),\n         year=as.factor(year),\n         volume = as.numeric(volume)) |&gt;\n  drop_na(density)\n\n# pool-mean\nculture_pools_mean_id &lt;- culture_pools |&gt;\n  group_by(year, days, id) |&gt;\n  summarise(density = mean(density), .groups = \"drop\")\n\n# day-mean\nculture_pools_mean &lt;- culture_pools_mean_id |&gt;\n  group_by(year, days) |&gt;\n  summarise(\n    density_mean = round(mean(density),0),\n    n = n(),\n    sd = round(sd(density),1),\n    se = round(sd(density) / sqrt(n()),1),\n    ci95 = round(qt(0.975, df = n() - 1) * sd(density) / sqrt(n()),1),\n    .groups = \"drop\"\n  ) |&gt; rename(density = density_mean)\n\nculture_pools_sum &lt;- culture_pools |&gt;\n  group_by(year, days) |&gt;\n  summarise(\n    total = round(sum(density),0),\n    sd = round(sd(density),1),\n    se = round(sd / sqrt(n()),1),\n    ci95 = round(qt(0.975, df = n() - 1) * se,1),\n    .groups = \"drop\"\n  )"
  },
  {
    "objectID": "data.html#data-sources-per-year",
    "href": "data.html#data-sources-per-year",
    "title": "",
    "section": "",
    "text": "Year\nSource\n\n\n\n\n2020\n2.2.OTI_Pools_Culture_2020\n\n\n2020\n2.1.Witstari_Jetty_Pools_Culture_2020.csv\n\n\n2021\nRearingLarvaeData_2021.xlsx\n\n\n2022\nLarval Density Database Lizard Is 2022.xlsx\n\n\n2023\nDATA_MC_Collection_Cultures.xlsx\n\n\n2024\nDATA_MC_SpawningOps_DataSheets_Nov-Dec2024.xlsx\n\n\n\nAccessible via AIMS share drive:\n\n\n\nlibrary(tidyverse)\nlibrary(janitor)\n\nculture_pools_2020 &lt;-\n  rbind(\n    # read_csv(\"data/2020/2.1.Witstari_Jetty_Pools_Culture_2020.csv\", show_col_types = FALSE) |&gt;\n    # clean_names() |&gt;\n    # mutate(volume = pool_bin_volume/1000, # note this must be ml not l\n    #        density = larvae_ml*1000,\n    #        id=pool,\n    #        date = as.POSIXct(date, format = \"%d/%m/%y\")) |&gt;\n    # mutate(spawndate = as.POSIXct(\"5/12/20\", format = \"%d/%m/%y\")) |&gt; # assume 5th Dec?\n    # mutate(days = as.numeric(as.POSIXct(date) - spawndate)) |&gt;\n    # select(date, days, id, replicate, density, volume) |&gt;\n    # mutate(id=as.factor(id),\n    #        replicate=as.factor(replicate)\n    #        ) |&gt;\n    # mutate(year = 2020, density=as.numeric(density)),\n\n    read_csv(\"data/2020/2.2.OTI_Pools_Culture_2020.csv\", show_col_types = FALSE) |&gt;\n      clean_names() |&gt;\n      drop_na() |&gt;\n      mutate(\n        date =  as.POSIXct(date, format = \"%d/%m/%y\"),\n        volume = pool_bin_volume_ml/1000,\n        density = larvae_ml * 1000,\n        id = pool,\n        spawndate = case_when(\n          pool == 2 ~ as.POSIXct(\"05/12/20\", format = \"%d/%m/%y\"),\n          pool == 4 ~ as.POSIXct(\"04/12/20\", format = \"%d/%m/%y\"),\n          TRUE ~ NA_POSIXct_\n        )\n      ) |&gt;\n      mutate(days = as.numeric(date - spawndate)/(60*60*24)) |&gt;\n      select(date, days, id, replicate, density, volume) |&gt;\n      mutate(id=as.factor(id),\n             replicate=as.factor(replicate)\n      ) |&gt;\n      mutate(year = 2020, density=as.numeric(density))\n  ) |&gt;\n  mutate(total = density * volume) |&gt;\n  filter(density &gt; 1000) |&gt;\n  filter(volume &lt; 100)\n\n\n\n\nculture_pools_2021 &lt;- read_excel(\"data/2021/RearingLarvaeData_2021.xlsx\", sheet=\"LarvaeDensity_Rearing\") |&gt;\n  clean_names() |&gt;\n  mutate(days =  as.numeric(sampling_date-spawning_date),\n         date=as.POSIXct(sampling_date, format = \"%d/%m/%Y\")) |&gt;\n  rename(id = pool_id) |&gt;\n  rename(density = larvae_number_per_l) |&gt;\n  rename(volume = pool_volume_liter) |&gt;\n  select(date, days, id, replicate, density, volume) |&gt;\n  mutate(across(where(is.character), ~na_if(., \"NA\"))) |&gt;\n  na.omit() |&gt;\n  mutate(id=as.factor(id),\n         replicate=as.factor(replicate)\n  ) |&gt;\n  mutate(year = 2021, density=as.numeric(density)) |&gt;\n  mutate(total = density * volume)\n\n\nculture_pools_2022 &lt;- read_excel(\"data/2022/Larval Density Database Lizard Is 2022.xlsx\", sheet = \"Culturing\") |&gt;\n  janitor::clean_names() |&gt;\n  rename(\n    volume = pool_volume,\n    replicate = sample_replicate,\n    days=time,\n    id=pool_no\n  ) |&gt;\n  mutate(\n    density = suppressWarnings(as.numeric(larvae_per_ml)) *1000\n  ) |&gt;\n  select(date, days, id, replicate, density, volume) |&gt;\n  na.omit() |&gt;\n  mutate(id=as.factor(id),\n         replicate=as.factor(replicate),\n         date=as.POSIXct(date,format = \"%d/%m/%Y\")\n  ) |&gt;\n  mutate(year = 2022, density=as.numeric(density)) |&gt;\n  mutate(total = density * volume)\n\n\nculture_pools_2023 &lt;- read_excel(\"data/2023/DATA_MC_Collection_Cultures.xlsx\", sheet=\"data_CultureClean\") |&gt;\n  clean_names() |&gt;\n  mutate(date = date_sample,\n         days =  as.numeric(date_sample-date_collection)/(60*60*24)) |&gt;\n  rename(volume = culture_volume_l) |&gt;\n  rename(sample_volume = sample_volume_m_l) |&gt;\n  rename(id = pool_tank_number) |&gt;\n  rename(replicate =  sample_number) |&gt;\n  rename(density = sample_volume) |&gt;\n  mutate(across(where(is.character), ~na_if(., \"NA\"))) |&gt;\n  mutate(density = as.numeric(density)) |&gt;\n  select(date, days, id, replicate, density, volume) |&gt;\n  mutate(id=as.factor(id),\n         replicate=as.factor(replicate)\n  ) |&gt;\n  mutate(year = 2023, density=as.numeric(density), volume=as.numeric(volume)) |&gt;\n  mutate(total = density * volume)\n\n\n\nculture_pools_2024 &lt;- read_excel(\"data/2024/DATA_MC_SpawningOps_DataSheets_Nov-Dec2024.xlsx\", sheet=\"data_LarvCulture1-6_CLEAN\") |&gt;\n  clean_names() |&gt;\n  filter(volume_culture_l == 9280.0) |&gt;\n  mutate(\n    sampling_date = suppressWarnings(\n      if_else(\n        grepl(\"^\\\\d{1,2}/\\\\d{1,2}/\\\\d{4}$\", sampling_date),\n        as.Date(sampling_date, format = \"%d/%m/%Y\"),\n        as.Date(as.numeric(sampling_date), origin = \"1899-12-30\")\n      )\n    )\n  ) |&gt;\n  mutate(\n    sampling_date = as.Date(sampling_date, format = \"%d/%m/%Y\"),\n    days = as.numeric(sampling_date - as.Date(spawning_date)),\n    replicate = pool_id,\n    id = sample_id,\n  ) |&gt;\n  mutate(density = larvae_count_perml * 1000) |&gt;\n  mutate(volume = volume_culture_l,\n         date = sampling_date) |&gt;\n  select(date, days, id, replicate, density, volume) |&gt;\n  mutate(id=as.factor(id),\n         replicate=as.factor(replicate)\n  ) |&gt;\n  mutate(year = 2024, density=as.numeric(density), days = as.factor(days), total=volume*density)\n\nremove_outliers_se &lt;- function(df, se_mult = 2) {\n  se &lt;- sd(df$density, na.rm = TRUE) / sqrt(sum(!is.na(df$density)))\n  m &lt;- mean(df$density, na.rm = TRUE)\n  dplyr::filter(df, abs(density - m) &lt;= se_mult * se)\n}\n\n\nculture_pools &lt;- rbind(culture_pools_2020,\n                       culture_pools_2021,\n                       culture_pools_2022,\n                       culture_pools_2023,\n                       culture_pools_2024) |&gt;\n  mutate(days=as.factor(days),\n         year=as.factor(year),\n         volume = as.numeric(volume)) |&gt;\n  drop_na(density)\n\n# pool-mean\nculture_pools_mean_id &lt;- culture_pools |&gt;\n  group_by(year, days, id) |&gt;\n  summarise(density = mean(density), .groups = \"drop\")\n\n# day-mean\nculture_pools_mean &lt;- culture_pools_mean_id |&gt;\n  group_by(year, days) |&gt;\n  summarise(\n    density_mean = round(mean(density),0),\n    n = n(),\n    sd = round(sd(density),1),\n    se = round(sd(density) / sqrt(n()),1),\n    ci95 = round(qt(0.975, df = n() - 1) * sd(density) / sqrt(n()),1),\n    .groups = \"drop\"\n  ) |&gt; rename(density = density_mean)\n\nculture_pools_sum &lt;- culture_pools |&gt;\n  group_by(year, days) |&gt;\n  summarise(\n    total = round(sum(density),0),\n    sd = round(sd(density),1),\n    se = round(sd / sqrt(n()),1),\n    ci95 = round(qt(0.975, df = n() - 1) * se,1),\n    .groups = \"drop\"\n  )"
  },
  {
    "objectID": "ponds.html",
    "href": "ponds.html",
    "title": "",
    "section": "",
    "text": "Inset larval culture locations per year\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLarval culture locations GBR-wide"
  },
  {
    "objectID": "cultures.html",
    "href": "cultures.html",
    "title": "MC Larval Culture dashboard",
    "section": "",
    "text": "library(shiny)\nlibrary(shinyWidgets)\n\n\nlabel_map &lt;- c(\n  days = \"Days\",\n  year = \"Year\",\n  id = \"Pool ID\",\n  replicate = \"Replicate\",\n  density = \"Larval density (per 1l)\",\n  total = \"Total larvae per pool\"\n)\n# Reverse lookup: label → variable name\nreverse_map &lt;- setNames(names(label_map), label_map)\n\naxis_vars &lt;- c(\"days\", \"year\", \"id\", \"replicate\")\ny_vars &lt;- c(\"density\", \"total\")\n\nwellPanel(\n  selectInput(\"xvar\", \"X-axis\", \n              choices = setNames(names(label_map)[1:4], label_map[1:4]), \n              selected = \"days\"),\n  selectInput(\"yvar\", \"Y-axis\", \n              choices = setNames(names(label_map)[5:6], label_map[5:6]), \n              selected = \"total\")\n)\n\n\n\nX-axis\n\nDays\nYear\nPool ID\nReplicate\n\n\n\n\nY-axis\n\nLarval density (per 1l)\nTotal larvae per pool\n\n\n\n\n\nwellPanel(\n  radioGroupButtons(\n    inputId = \"agg_method\",\n    #label = \"Aggregation method\",\n    choices = c(\"Mean\" = \"mean\", \"Sum\" = \"sum\"),\n    selected = \"mean\",\n    justified = TRUE,\n    status = \"primary\"\n  )\n)\n\n\n\n\n\n\n\n\n\nMean\n\n\n\n\n\nSum\n\n\n\n\n\n\n\nwellPanel(\n  selectInput(\"facetvar\", \"Grouping variables (row)\", \n              choices = c(\"None\", setNames(names(label_map)[1:4], label_map[1:4])), \n              selected = \"year\"),\n  selectInput(\"facetvar2\", \"Grouping variables (column)\", \n              choices = c(\"None\", setNames(names(label_map)[1:4], label_map[1:4])), \n              selected = \"None\")\n)\n\n\n\nGrouping variables (row)\n\nNone\nDays\nYear\nPool ID\nReplicate\n\n\n\n\nGrouping variables (column)\n\nNone\nDays\nYear\nPool ID\nReplicate\n\n\n\n\n\nwellPanel(\n  checkboxInput(\"free_scales\", \"Flexible axis\", value = FALSE),\n  checkboxInput(\"show_error\", \"Show standard error (SE)\", value = FALSE),\n  checkboxInput(\"show_legend\", \"Show legend\", value = FALSE)\n  \n)\n\n\n\n\n\n\nFlexible axis\n\n\n\n\n\n\n\nShow standard error (SE)\n\n\n\n\n\n\n\nShow legend"
  },
  {
    "objectID": "cultures.html#column",
    "href": "cultures.html#column",
    "title": "MC Larval Culture dashboard",
    "section": "",
    "text": "library(shiny)\nlibrary(shinyWidgets)\n\n\nlabel_map &lt;- c(\n  days = \"Days\",\n  year = \"Year\",\n  id = \"Pool ID\",\n  replicate = \"Replicate\",\n  density = \"Larval density (per 1l)\",\n  total = \"Total larvae per pool\"\n)\n# Reverse lookup: label → variable name\nreverse_map &lt;- setNames(names(label_map), label_map)\n\naxis_vars &lt;- c(\"days\", \"year\", \"id\", \"replicate\")\ny_vars &lt;- c(\"density\", \"total\")\n\nwellPanel(\n  selectInput(\"xvar\", \"X-axis\", \n              choices = setNames(names(label_map)[1:4], label_map[1:4]), \n              selected = \"days\"),\n  selectInput(\"yvar\", \"Y-axis\", \n              choices = setNames(names(label_map)[5:6], label_map[5:6]), \n              selected = \"total\")\n)\n\n\n\nX-axis\n\nDays\nYear\nPool ID\nReplicate\n\n\n\n\nY-axis\n\nLarval density (per 1l)\nTotal larvae per pool\n\n\n\n\n\nwellPanel(\n  radioGroupButtons(\n    inputId = \"agg_method\",\n    #label = \"Aggregation method\",\n    choices = c(\"Mean\" = \"mean\", \"Sum\" = \"sum\"),\n    selected = \"mean\",\n    justified = TRUE,\n    status = \"primary\"\n  )\n)\n\n\n\n\n\n\n\n\n\nMean\n\n\n\n\n\nSum\n\n\n\n\n\n\n\nwellPanel(\n  selectInput(\"facetvar\", \"Grouping variables (row)\", \n              choices = c(\"None\", setNames(names(label_map)[1:4], label_map[1:4])), \n              selected = \"year\"),\n  selectInput(\"facetvar2\", \"Grouping variables (column)\", \n              choices = c(\"None\", setNames(names(label_map)[1:4], label_map[1:4])), \n              selected = \"None\")\n)\n\n\n\nGrouping variables (row)\n\nNone\nDays\nYear\nPool ID\nReplicate\n\n\n\n\nGrouping variables (column)\n\nNone\nDays\nYear\nPool ID\nReplicate\n\n\n\n\n\nwellPanel(\n  checkboxInput(\"free_scales\", \"Flexible axis\", value = FALSE),\n  checkboxInput(\"show_error\", \"Show standard error (SE)\", value = FALSE),\n  checkboxInput(\"show_legend\", \"Show legend\", value = FALSE)\n  \n)\n\n\n\n\n\n\nFlexible axis\n\n\n\n\n\n\n\nShow standard error (SE)\n\n\n\n\n\n\n\nShow legend"
  },
  {
    "objectID": "cultures.html#column-1",
    "href": "cultures.html#column-1",
    "title": "MC Larval Culture dashboard",
    "section": "Column",
    "text": "Column\n\nPlot\n\n# --- Reactive dataset builder ---\ndataset &lt;- reactive({\n  req(input$xvar, input$yvar)\n\n  vars &lt;- unique(c(input$xvar, input$facetvar, input$facetvar2))\n  vars &lt;- vars[vars != \"None\"]\n\n  agg_fun &lt;- match.fun(input$agg_method)\n  agg_label &lt;- tools::toTitleCase(input$agg_method)  # gives \"Mean\" or \"Sum\"\n  \n  df &lt;- culture_pools\n\n  # Dynamically create total if needed\n  if (input$yvar == \"total\" && !\"total\" %in% names(df)) {\n    df &lt;- df %&gt;% mutate(total = density * volume)\n  }\n\n  if (!input$yvar %in% names(df)) return(NULL)\n\n  # df %&gt;%\n  #   group_by(across(all_of(vars))) %&gt;%\n  #   summarise(\n  #   across(all_of(input$yvar), ~ agg_fun(.x, na.rm = TRUE), .names = \"{.col}\"),\n  #   .groups = \"drop\"\n  # )\n  \n  df %&gt;%\n  group_by(across(all_of(vars))) %&gt;%\n  summarise(\n    value = agg_fun(.data[[input$yvar]], na.rm = TRUE),\n    se = if (input$show_error) sd(.data[[input$yvar]], na.rm = TRUE) / sqrt(n()) else NA_real_,\n    .groups = \"drop\"\n  )\n  \n})\n\nrenderPlot({\n  req(dataset())\n\n  tryCatch({\n    df &lt;- dataset()\n\n    label_map &lt;- c(\n      days = \"Days\",\n      year = \"Year\",\n      id = \"Pool ID\",\n      replicate = \"Replicate\",\n      density = \"Larval density (per 1l)\",\n      total = \"Total larvae per pool\"\n    )\n\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    facetvar &lt;- input$facetvar\n    facetvar2 &lt;- input$facetvar2\n    agg_label &lt;- tools::toTitleCase(input$agg_method)\n\n    p &lt;- ggplot(df, aes(x = .data[[xvar]], y = value, fill = .data[[xvar]])) +\n      geom_col(position = \"dodge\", col=\"black\", linewidth=0.5, alpha=0.8) +\n      scale_y_continuous(labels = scales::label_comma()) +\n      theme_bw() +\n      theme(\n        legend.position = if (input$show_legend) \"right\" else \"none\"\n      ) +\n      labs(\n        x = label_map[[xvar]],\n        y = paste(agg_label, label_map[[yvar]]),\n        fill = label_map[[xvar]]\n      ) + \n      scale_fill_viridis_d(option = \"D\", begin = 0, end = 0.9, direction = 1)\n\n    if (facetvar != \"None\" && facetvar2 != \"None\") {\n      facet_formula &lt;- as.formula(paste(facetvar, \"~\", facetvar2))\n      p &lt;- p + facet_grid(facet_formula, scales = if (input$free_scales) \"free\" else \"fixed\")\n    } else if (facetvar != \"None\") {\n      p &lt;- p + facet_wrap(as.formula(paste(\"~\", facetvar)), scales = if (input$free_scales) \"free\" else \"fixed\")\n    } else if (facetvar2 != \"None\") {\n      p &lt;- p + facet_wrap(as.formula(paste(\"~\", facetvar2)), scales = if (input$free_scales) \"free\" else \"fixed\")\n    }\n    \n    if (input$show_error && \"se\" %in% names(df)) {\n      p &lt;- p + geom_errorbar(aes(\n        ymin = value - se,\n        ymax = value + se\n      ), width = 0.2)\n    }\n    \n    p\n  }, error = function(e) {\n    plot.new()\n    title(\"⚠️ Plot rendering failed. Try different inputs.\")\n  })\n})\n\n\n\n\n\n\nData\n\nlibrary(DT)\n\nrenderDataTable({\n  req(input$xvar, input$yvar)\n\n  # Label maps\n  label_map &lt;- c(\n    days = \"Days\",\n    year = \"Year\",\n    id = \"Pool ID\",\n    replicate = \"Replicate\",\n    density = \"Larval density (per l)\",\n    total = \"Total larvae per pool\"\n  )\n  agg_label &lt;- tools::toTitleCase(input$agg_method)  # \"Mean\" or \"Sum\"\n\n  vars &lt;- unique(c(input$xvar, input$facetvar, input$facetvar2))\n  vars &lt;- vars[vars != \"None\"]\n\n  df &lt;- culture_pools\n\n  if (input$yvar == \"total\" && !\"total\" %in% names(df)) {\n    df &lt;- df %&gt;% mutate(total = density * volume)\n  }\n\n  if (!input$yvar %in% names(df)) return(NULL)\n\n  agg_fun &lt;- match.fun(input$agg_method)\n\n  df_summary &lt;- df %&gt;%\n    group_by(across(all_of(vars))) %&gt;%\n    summarise(\n      value = agg_fun(.data[[input$yvar]], na.rm = TRUE),\n      se = if (input$show_error) sd(.data[[input$yvar]], na.rm = TRUE) / sqrt(n()) else NA_real_,\n      .groups = \"drop\"\n    )\n\n  validate(need(nrow(df_summary) &gt; 0, \"No data available for the selected grouping.\"))\n\n  df_summary &lt;- df_summary %&gt;%\n    rename_with(~ label_map[.x], .cols = intersect(vars, names(label_map)))\n\n  value_label &lt;- paste(agg_label, label_map[[input$yvar]])\n  names(df_summary)[names(df_summary) == \"value\"] &lt;- value_label\n\n  if (input$show_error) {\n    df_summary &lt;- df_summary %&gt;%\n      mutate(`Standard error` = round(se, 2)) %&gt;%\n      select(-se)\n  } else {\n    df_summary &lt;- df_summary %&gt;% select(-se)\n  }\n\n  df_summary %&gt;%\n    mutate(across(where(is.numeric), scales::comma)) %&gt;%\n    datatable(\n      options = list(\n        scrollX = TRUE,\n        scrollY = 300,\n        pageLength = 100\n      )\n    )\n})"
  }
]